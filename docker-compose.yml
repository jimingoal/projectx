version: '3'


services:
  nginx:
    image: nginx:1.19.7-alpine
    container_name: www_docker_nginx
    volumes:
      - .:/docker
      # nginx.conf를 내가 만들지 않는다면 아래는 주석처리해도 된다.
      - ./etc/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./etc/nginx/logs:/etc/nginx/logs

    # 포트 지정. Host OS 의 포트를 Guest OS 로 연결
    ports:
      - "80:80"
      - "443:443"
     # PHP 의 기본 설정 파일은 컨테이너의 /usr/local/etc 에 있다.
     command: [nginx-debug, "-g", "daemon off;"]
  php:
    container_name: www_docker_php
    build:
      context: .
      dockerfile: Dockerfile.php # 별도의 Dockerfile 로 이미지를 생성하고, mysqli extension 설치를 하기 때문에, Dockerfile 로 작업한다.
    volumes:
      # nginx 설정과 같이 Host OS 의 /Users/thruthesky/www/docker 를 Guest OS 의 /docker 로 연결
      - .:/docker
      # Host OS 의 /Users/thruthesky/www/docker/etc/php.ini 를 Guest OS 의 /user/local/etc/php/php.ini 로 연결
      - ./etc/php.ini:/usr/local/etc/php/php.ini

  # MariaDB 설정
  # 주의: 각종 계정이나 루트 비번을 설정하면, DB 에 기록된다. 그래서 나중에 다시 변경하려면 DB 에서 변경을 해야 한다.
  mariadb:
    image: mariadb:latest
    container_name: www_docker_mariadb
    environment:
      - MYSQL_DATABASE=oniyuni # 처음 이미지 생성 후, 컨테이너 실행시, DB 를 준비한다. 덮어쓰지 않음.
      - MYSQL_USER=nakun # 컨테이너 실행시, 사용자를 지정한다.
      - MYSQL_PASSWORD=354900
      - MYSQL_ROOT_PASSWORD=354900 # 컨테이너 실행시, 관리자 비밀번호.
    volumes:
#      - ./etc:/etc/mysql # mysql 설정을 ./etc 에 지정한다. 굳이 mysql 설정은 안해도 된다. 기본 설정이 충분하다.

      # HOST OS 폴더의 /Users/thruthesky/www/docker/mysqldata 를 Guest OS 의 /var/lib/mysql 에 링크. 이렇게 해서,
      # MariaDB(또는 mysql) database 파일을 Host OS 폴더에 저장한다. 즉, MariaDB 데이터 파일이 Host OS 에 저장되는 것이다.
      # 즉, Docker container 또는 image 가 삭제되어도, 자료는 HOST OS 에 저장된다.
      # 참고로, 이 경로는 처음 docker-compose up 으로 설치 하기 전에 지정해야한다.
      # 만약, 나중에 지정을 하면, docker system prune -a(또는 docker image 삭제)를 하고, 다시 설치해야 한다.
      - ./var/lib/mysql:/var/lib/mysql

    # DB 포트 연결
    ports:
      - "3306:3306"

  phpmyadmin:
    image: phpmyadmin
    environment:
      - PMA_HOST=mariadb
    ports:
      - 33060:80
      
volumes:
  mysqldata: {}